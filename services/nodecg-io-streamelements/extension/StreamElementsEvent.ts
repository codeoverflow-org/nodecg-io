/**
 * StreamElementsEvent was automatically generated by json-schema-to-typescript
 * using the schema at https://docs.streamelements.com/docs/connecting-via-websocket.
 */

// Generic types for all events

export interface StreamElementsEvent {
    /**
     * StreamElements hexadecimal Event ID
     */
    _id: string;
    /**
     * StreamElements hexadecimal activity ID
     */
    activityId: string;
    /**
     * StreamElements hexadecimal Channel ID
     */
    channel: string;
    /**
     * Event type
     */
    type: "cheer" | "follow" | "host" | "raid" | "subscriber" | "tip";
    /**
     * Event provider
     */
    provider: "twitch" | "youtube" | "facebook";
    flagged: boolean;
    data: StreamElementsEventData;
    /**
     * Event creation date and time
     */
    createdAt: string;
    /**
     * Event update date and time
     */
    updatedAt: string;
    /**
     * Listener property for test events
     */
    listener?: string;
    /**
     * Event property for test events
     */
    event?: StreamElementsTestEventData;
    [k: string]: unknown;
}

export interface StreamElementsEventData {
    /**
     * StreamElements hexadecimal tip ID
     */
    tipId?: string;
    /**
     * Twitch username
     */
    username: string;
    /**
     * Twitch channel ID
     */
    providerId?: string;
    /**
     * Twitch username case-sensitive plus regional characters if provided
     */
    displayName: string;
    /**
     * Amount of currency in tip, months in subs, hosting/raiding viewers, bits in cheer
     */
    amount: number;
    /**
     * Current months streak (subs only)
     */
    streak?: number;
    /**
     * Subscriber tier (subs only)
     */
    tier?: "1000" | "2000" | "3000" | "prime";
    /**
     * true if the sub was a gift (subs only)
     */
    gifted: boolean;
    /**
     * The sender of a gifted sub (subs only)
     */
    sender?: string;
    /**
     * Currency symbol (tips)
     */
    currency?: string;
    /**
     * User provided message
     */
    message: string;
    quantity?: number;
    /**
     * Redeemed items
     */
    items: unknown[];
    /**
     * URI of user avatar
     */
    avatar: string;
    [k: string]: unknown;
}

export interface StreamElementsTestEventData {
    /**
     * StreamElements hexadecimal tip ID
     */
    tipId?: string;
    /**
     * Twitch username
     */
    name: string;
    /**
     * Twitch channel ID
     */
    providerId?: string;
    /**
     * Twitch username case-sensitive plus regional characters if provided
     */
    displayName: string;
    /**
     * Amount of currency in tip, months in subs, hosting/raiding viewers, bits in cheer
     */
    amount: number;
    /**
     * Current months streak (subs only)
     */
    streak?: number;
    /**
     * Subscriber tier (subs only)
     */
    tier?: "1000" | "2000" | "3000" | "prime";
    /**
     * true if the sub was a gift (subs only)
     */
    gifted: boolean;
    /**
     * The sender of a gifted sub (subs only)
     */
    sender?: string;
    /**
     * Currency symbol (tips)
     */
    currency?: string;
    /**
     * User provided message
     */
    message: string;
    quantity?: number;
    /**
     * Redeemed items
     */
    items: unknown[];
    /**
     * URI of user avatar
     */
    avatar: string;
    [k: string]: unknown;
}

// Specific types for each event:

interface StreamElementsBaseEvent<TType, TData> {
    /**
     * StreamElements hexadecimal Event ID
     */
    _id: string;
    /**
     * StreamElements hexadecimal activity ID
     */
    activityId: string;
    /**
     * StreamElements hexadecimal Channel ID (not your channel name)
     */
    channel: string;
    /**
     * Event creation date and time. E.g. 2021-11-20T19:11:17.472Z
     */
    createdAt: string;
    /**
     * Event update date and time. E.g. 2021-11-20T19:11:17.472Z
     */
    updatedAt: string;
    /**
     * The internal event data.
     */
    data: TData | StreamElementsDataBase;
    flagged: boolean;
    /**
     * Event provider
     */
    provider: "twitch" | "youtube" | "facebook";
    /**
     * Event type
     */
    type: TType;
}

interface StreamElementsDataBase {
    /**
     * The url of the user's avatar.
     */
    avatar: string;
    /**
     * The users display name.
     */
    displayName: string;
    /**
     * The user's Twitch username.
     */
    username: string;
    /**
     * The Twitch Channel ID
     */
    providerId?: string;
}

export type StreamElementsFollowEvent = StreamElementsBaseEvent<"follow", {}>;

export type StreamElementsCheerEvent = StreamElementsBaseEvent<"cheer", {
    /**
     * The count of bits that were cheered.
     */
    amount: number;
    /**
     * The message contained in the cheer.
     */
    message: string;
}>;

export type StreamElementsHostEvent = StreamElementsBaseEvent<"host", {
    /**
     * Number of viewers that are watching through this host.
     */
    amount: number;
}>;

export type StreamElementsRaidEvent = StreamElementsBaseEvent<"raid", {
    /**
     * Number of viewers raiding this channel.
     */
    amount: number;
}>;

export type StreamElementsSubscriberEvent = StreamElementsBaseEvent<"subscriber", {
    /**
     * The total amount of months that this user has already subscribed.
     */
    amount: number;
    /**
     * True if this sub was gifted by someone else.
     */
    gifted?: boolean;
    /**
     * The username of the user that has gifted this sub.
     */
    sender?: string;
    /**
     * Subscription message by user
     */
    message: string;
    /**
     * Amount of consequent months this user already has subscribed.
     */
    streak: number;
    /**
     * The tier of the subscription.
     */
    tier: "1000" | "2000" | "3000" | "prime";
}>;

export type StreamElementsTipEvent = StreamElementsBaseEvent<"tip", {
    /**
     * The amount of money in the given currency that was tipped.
     */
    amount: number;
    /**
     * The user provided message for this tip.
     */
    message: string;
    /**
     * The currency symbol.
     */
    currency: string;
    /**
     * StreamElements's hexadecimal tip ID.
     */
    tipId: string;
}>
